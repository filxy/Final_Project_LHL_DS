# -*- coding: utf-8 -*-
"""DFD_streamlit-app

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YPJowCu1G0CD9bhg9-N1KAY5saqW0vWw
"""

#!pip install -q streamlit
#!pip install ipykernel==4.10
#!pip install ipython==5.5.0
#!pip install pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile DFD_streamlit-app.py
# 
# import cv2
# import ipykernel
# import pyngrok
# import time
# import numpy as np
# import streamlit as st
# import tensorflow as tf
# from tensorflow.keras.preprocessing import image
# from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2,preprocess_input as mobilenet_v2_preprocess_input
# 
# 
# camera = st.container()
# upload = st.container()
# bar = st.container()
# 
# st.title('Deep Fake Detector')
# 
# st.write('Detect using Real-time Web cam image:')
# 
# with st.container():
#    img_file_buffer = st.camera_input("Take a picture")
# 
# if img_file_buffer is not None:
#     # To read image file buffer as bytes:
#     bytes_data = img_file_buffer.getvalue()
#     # Check the type of bytes_data:
#     # Should output: <class 'bytes'>
#     st.write(type(bytes_data))
# 
# if uploaded_file is not None:
#     # Convert the file to an opencv image.
#     file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
#     opencv_image = cv2.imdecode(file_bytes, 1)
#     opencv_image = cv2.cvtColor(opencv_image, cv2.COLOR_BGR2RGB)
#     resized = cv2.resize(opencv_image,(224,224))
#     # Now do something with the image! For example, let's display it:
#     st.image(opencv_image, channels="RGB")
# 
#     resized = mobilenet_v2_preprocess_input(resized)
#     img_reshape = resized[np.newaxis,...]
# 
#     meso = Meso4()
#     meso.load('/content/drive/MyDrive/Colab Notebooks/Meso4_DF') 
#     #image generator to predict images
#     dataGenerator = ImageDataGenerator(rescale=1./255)
#     generator = dataGenerator.flow_from_directory(
#         'uploaded_filename',
#         target_size=(256, 256),
#         batch_size= 1,
#         class_mode='binary',
#         subset='training')
#     # Rendering image X with label y for MesoNet
#     X, y = generator.next()
#     # Evaluating prediction
#     print(f"Predicted likelihood: {meso.predict(X)[0][0]:.4f}")
#     print(f"Actual label: {int(y[0])}")
#     print(f"\nCorrect prediction: {round(meso.predict(X)[0][0])==y[0]}")
#     # Showing image
#     plt.imshow(np.squeeze(X));
#     st.write('predictions closer to 1 are fake and predictions closer to 0 are real')
# 
# st.write('Detect by uploading image or video')
# 
# with st.container():
#   uploaded_files = st.file_uploader("Choose a image or video file", accept_multiple_files=True)
# for uploaded_file in uploaded_files:
#      bytes_data = uploaded_file.read()
#      st.write("filename:", uploaded_file.name)
#      st.write(bytes_data)
# 
# if uploaded_file is not None:
#     # Convert the file to an opencv image.
#     file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
#     opencv_image = cv2.imdecode(file_bytes, 1)
#     opencv_image = cv2.cvtColor(opencv_image, cv2.COLOR_BGR2RGB)
#     resized = cv2.resize(opencv_image,(224,224))
#     # Now do something with the image! For example, let's display it:
#     st.image(opencv_image, channels="RGB")
# 
#     resized = mobilenet_v2_preprocess_input(resized)
#     img_reshape = resized[np.newaxis,...]
# if image:
#   meso = Meso4()
#   meso.load('/content/drive/MyDrive/Colab Notebooks/Meso4_DF') 
#   #image generator to predict images
#   dataGenerator = ImageDataGenerator(rescale=1./255)
#   generator = dataGenerator.flow_from_directory(
#       'uploaded_filename',
#       target_size=(256, 256),
#       batch_size= 1,
#       class_mode='binary',
#       subset='training')
#   # Rendering image X with label y for MesoNet
#   X, y = generator.next()
#   # Evaluating prediction
#   print(f"Predicted likelihood: {meso.predict(X)[0][0]:.4f}")
#   print(f"Actual label: {int(y[0])}")
#   print(f"\nCorrect prediction: {round(meso.predict(X)[0][0])==y[0]}")
#   # Showing image
#   plt.imshow(np.squeeze(X));
# 
# st.write('predictions closer to 1 are fake and predictions closer to 0 are real')
#   elif:
#   #loading weights for video detection
#   Classifier = Meso4()
#   Classifier.load('/content/drive/MyDrive/Colab Notebooks/Meso4_F2F.h5')
# 
# #video prediction
# predictions = compute_accuracy(Classifier, 'uploaded_video')
# for video_name in predictions:
#     #print('`{}` video class prediction :'.format, predictions[video_name])
#     print('`{}` video class prediction :'.format(video_name), predictions[video_name][0])
# st.write('predictions closer to 1 are fake and predictions closer to 0 are real')
# 
#      #Genrate_pred = st.button("Generate Prediction")    
#      #if Genrate_pred:
#        #prediction = model.predict()

!streamlit run DFD_streamlit-app.py
#!streamlit run /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py